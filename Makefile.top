# -*- Mode: makefile -*-
TOPDIR := $(shell pwd)
PREFIX := $(TOPDIR)/install

COMPONENTS := $(COMPONENTS_EXTRA) \
        couchdb \
        ns_server \

COMPONENTS-GROMMIT := ctypes curl libevent sqlite

ifneq "$(DESTDIR)" ""
LDFLAGS := -L$(DESTDIR)$(PREFIX)/lib $(LDFLAGS)
CPPFLAGS := -I$(DESTDIR)$(PREFIX)/include $(CPPFLAGS)
export LDFLAGS CPPFLAGS
endif

ifdef FOR_WINDOWS
  MAKETYPE="NMake Makefiles"
else
  MAKETYPE="Unix Makefiles"
endif

ifneq "$(COUCHBASE_DEBUG_BUILD)" ""
WITH_DEBUG_FLAG=--with-debug
endif

BUILD_COMPONENTS := $(filter-out ns_server, $(COMPONENTS))
BUILD_COMPONENTS_EX := geocouch

MAKE_INSTALL_TARGETS := $(patsubst %, make-install-%, $(BUILD_COMPONENTS))
MAKE_INSTALL_TARGETS_EX := $(patsubst %, make-install-%, $(BUILD_COMPONENTS_EX))

TEST_COMPONENTS := $(BUILD_COMPONENTS)
MAKE_TEST_TARGETS := $(patsubst %, make-test-%, $(TEST_COMPONENTS))
MAKE_TEST_TARGETS_EX :=

MAKEFILE_TARGETS := $(patsubst %, %/Makefile, $(BUILD_COMPONENTS))

OPTIONS := --prefix=$(PREFIX)
AUTOGEN := ./config/autorun.sh

ifdef PREFER_STATIC
LIBRARY_OPTIONS := --enable-static --disable-shared
else
NUKE_LA_FILES ?= false
LIBRARY_OPTIONS := --disable-static --enable-shared
endif

all: do-install-all

DIST_VERSION = `git describe`
DIST_MANIFEST = manifest.xml
DIST_PRODUCT = couchbase-server
DIST_COMPONENTS_EXTRA =  geocouch
DIST_COMPONENTS = $(filter-out libcouchbase, $(COMPONENTS)) $(DIST_COMPONENTS_EXTRA)

dist:
	for i in $(DIST_COMPONENTS); do (cd $$i && rm -f *.tar.gz && $(MAKE) dist || true); done
	mkdir -p tmp/$(DIST_PRODUCT)_src
	rm -rf tmp/$(DIST_PRODUCT)_src/*
	(for i in $(DIST_COMPONENTS); do \
         mkdir -p tmp/$(DIST_PRODUCT)_src/$$i; \
         (cd tmp/$(DIST_PRODUCT)_src/$$i && \
          tar --strip-components 1 -xzf ../../../$$i/$$i-*.tar.gz || \
          tar --strip-components 1 -xzf ../../../$$i/*.tar.gz || \
          (cd ../.. && rm -rf $(DIST_PRODUCT)_src/$$i)); \
         done)
	cp Makefile tmp/$(DIST_PRODUCT)_src
	if [ -f $(DIST_MANIFEST) ]; then cp $(DIST_MANIFEST) tmp/$(DIST_PRODUCT)_src/manifest.xml; fi
	tar -C tmp -czf $(DIST_PRODUCT)_src-$(DIST_VERSION).tar.gz $(DIST_PRODUCT)_src

test: $(MAKE_TEST_TARGETS) $(MAKE_TEST_TARGETS_EX)

e2etest:
	cd testrunner && $(MAKE) test

e2eviewtests:
	cd testrunner && $(MAKE) test-views

do-install-all: $(MAKE_INSTALL_TARGETS) $(MAKE_INSTALL_TARGETS_EX) make-install-ns_server

-clean-common:
	(cd cmake && make clean || true)
	rm -rf cmake/CMakeFiles cmake/CMakeCache.txt cmake/cmake_install.cmake cmake/CTestTestfile.cmake cmake/install_manifest.txt cmake/Makefile cmake/CPack*
	rm -rf install tmp
	rm -f moxi*log
	rm -f memcached*log

clean-grommit:
	for i in $(COMPONENTS-GROMMIT);  do (rm -rf $$i* || true); done

clean: -clean-common
	for i in $(COMPONENTS); do (cd $$i && $(MAKE) clean || true); done

distclean: -clean-common
	for i in $(COMPONENTS); do (cd $$i && $(MAKE) distclean || true); done
	rm -rf install tmp
	rm -f moxi*log
	rm -f memcached*log

clean-xfd: $(patsubst %, do-clean-xfd-%, $(COMPONENTS) $(BUILD_COMPONENTS_EX)) -clean-common
	(cd icu4c && git clean -Xfdq) || true

clean-xfd-hard: $(patsubst %, do-hard-clean-xfd-%, $(COMPONENTS) $(BUILD_COMPONENTS_EX)) -clean-common
	(cd icu4c && git clean -xfd) || true

do-clean-xfd-%:
	(cd $* && git clean -Xfdq)

do-hard-clean-xfd-%:
	(cd $* && git clean -xfdq)

clean-all: clean-grommit clean-xfd-hard

CONFIGURE_TARGETS := $(patsubst %, %/configure, $(BUILD_COMPONENTS))

ifdef AUTO_RECONFIG

define define-configure-target-deps
$(1)/configure: $(1)/.git/HEAD $(1)/.git/$(shell git --git-dir=$(1)/.git symbolic-ref -q HEAD || echo HEAD)
endef
# $(foreach comp, $(BUILD_COMPONENTS),$(eval $(info $(call define-configure-target-deps,$(comp)))))
# $(error stop)
$(foreach comp, $(BUILD_COMPONENTS),$(eval $(call define-configure-target-deps,$(comp))))

endif


ifdef FOR_WINDOWS
WIN_PREFIX=$(shell cygpath -w ${PREFIX})

cmake/Makefile: cmake/CMakeLists.txt
	(cd cmake; cmd /c ..\\tlm\\winbuild.bat cmake.exe -G ${MAKETYPE} \
                              -D "CMAKE_INSTALL_PREFIX=${WIN_PREFIX}" \
                              -D "DEPS_INCLUDE_DIR=${WIN_PREFIX}/include" \
                              -D "DEPS_LIB_DIR=${WIN_PREFIX}/lib" \
                              .)
make-install-cmake-stuff: cmake/Makefile
	(cd cmake; cmd /c ..\\tlm\\winbuild.bat nmake /nologo all install)
else
cmake/Makefile: cmake/CMakeLists.txt
	(cd cmake; cmake -G ${MAKETYPE} \
                              -D CMAKE_INSTALL_PREFIX=${PREFIX} \
                              -D DEPS_INCLUDE_DIR=${PREFIX}/include \
                              -D DEPS_LIB_DIR=${PREFIX}/lib \
                              .)

make-install-cmake-stuff: cmake/Makefile
	(cd cmake; $(MAKE) all install)
endif

$(CONFIGURE_TARGETS):
	cd $(dir $@) && $(AUTOGEN_PREFIX) $(AUTOGEN)

$(MAKEFILE_TARGETS): %/Makefile: | %/configure deps-for-%
	cd $* && $(CONFIGURE_PREFIX) ./configure -C $(OPTIONS) $($*_OPTIONS) $($*_EXTRA_OPTIONS)

$(MAKE_INSTALL_TARGETS): make-install-%: %/Makefile deps-for-%
	(rm -rf tmp/$*; mkdir -p tmp/$*)
	$(MAKE) -C $* install $($*_EXTRA_MAKE_OPTIONS)
	if [ "x$(NUKE_LA_FILES)" = "xtrue" ]; then $(RM) -f $(DESTDIR)$(PREFIX)/lib/*.la; fi

$(MAKE_TEST_TARGETS): make-test-%: make-install-%
	$(MAKE) -C $* test

$(patsubst %, deps-for-%, $(BUILD_COMPONENTS)):

# tar.gz _should_ have ./configure inside, but it doesn't
# make-install-libmemcached: AUTOGEN := true

make-install-ns_server: make-install-geocouch
	cd ns_server && ./configure "--prefix=$(PREFIX)"
	$(MAKE) -C ns_server install "PREFIX=$(PREFIX)"

make-install-geocouch:
	$(MAKE) -C geocouch COUCH_SRC=../couchdb/src/couchdb
	mkdir -p $(DESTDIR)$(PREFIX)/lib/couchdb/plugins/geocouch/ebin
	cp -r geocouch/ebin/* $(DESTDIR)$(PREFIX)/lib/couchdb/plugins/geocouch/ebin
	mkdir -p $(DESTDIR)$(PREFIX)/etc/couchdb/default.d
	cp -r geocouch/etc/couchdb/default.d/* $(DESTDIR)$(PREFIX)/etc/couchdb/default.d
	mkdir -p $(DESTDIR)$(PREFIX)/share/couchdb/www/script/test
	cp -r geocouch/share/www/script/test/* $(DESTDIR)$(PREFIX)/share/couchdb/www/script/test

ifdef PLEASE_BUILD_COUCH_DEPS
couchdb_OPTIONS := --with-v8-lib=$(PREFIX)/lib --with-v8-include=$(PREFIX)/include "PATH=$(PREFIX)/bin:$(PATH)"

# it's necessary to pass this late. couchdb is using libtool and
# libtool portably understands -rpath (NOTE: _single_ dash). Passing
# it to configure fails, because a bunch of stuff is checked with
# plain gcc versus with libtool wrapper.
# NOTE: this doesn't work on Darwin and has issues on Solaris
couchdb_EXTRA_MAKE_OPTIONS := "LDFLAGS=-R $(PREFIX)/lib $(LDFLAGS)"
endif

couchdb/Makefile: AUTOGEN = ./bootstrap

deps-for-couchdb: make-install-cmake-stuff

ifdef PLEASE_BUILD_COUCH_DEPS
deps-for-couchdb: make-install-couchdb-deps
endif

WRAPPERS := $(patsubst %, $(PREFIX)/bin/%, memcached-wrapper moxi-wrapper)

$(WRAPPERS): $(PREFIX)/bin/%: tlm/%.in
	mkdir -p $(PREFIX)/bin
	sed -e 's|@PREFIX@|$(PREFIX)|g' <$< >$@ || (rm $@ && false)
	chmod +x $@

WIN32_MAKE_TARGET := do-install-all
WIN32_HOST := i586-mingw32msvc
WIN_CYGWIN_FLAGS := CC=i686-pc-cygwin-gcc CXX=i686-pc-cygwin-g++

win32-cross:
	$(MAKE) $(WIN32_MAKE_TARGET) FOR_WINDOWS=1 HOST=$(WIN32_HOST) CROSS_COMPILING=1

ifdef FOR_WINDOWS

WIN_FLAGS := 'LOCAL=$(PREFIX)'

ifndef LIBS_PREFIX
$(warning LIBS_PREFIX usually needs to be given so that I can find libcurl, libevent and libpthread)
else

OPTIONS += 'CFLAGS=-I$(LIBS_PREFIX)/include $(CFLAGS)' 'LDFLAGS=-L$(LIBS_PREFIX)/lib $(LDFLAGS)'
LOCALINC := -I${PREFIX}/include
LOCALINC += -I$(LIBS_PREFIX)/include
ifdef NO_USECONDS_T
LOCALINC += -Duseconds_t=unsigned
endif

WIN_FLAGS += 'LOCALINC=$(LOCALINC)' 'LIB=-L$(LIBS_PREFIX)/lib $(LIB)'

endif

ifdef HOST
OPTIONS := --host=$(HOST) $(OPTIONS)
WIN_FLAGS += CC=$(HOST)-gcc CXX=$(HOST)-g++
endif

# hey, it's almost like Lisp
EP_ENGINE_MARCH := $(strip $(if $(or $(findstring x86_64, $(HOST)), $(findstring amd64, $(HOST))), ,-march=i686))

endif

AUTOCONF213 := autoconf213

icu4c/source/Makefile:
	(cd icu4c/source && ./configure "--prefix=$(PREFIX)")

make-install-icu4c: icu4c/source/Makefile
	$(MAKE) -C icu4c/source install

make-install-couchdb-deps: make-install-icu4c

CHECK_COMPONENTS ?= $(COMPONENTS)

CHECK_TARGETS := $(patsubst %, check-%, $(CHECK_COMPONENTS))

MAKE_CHECK_TARGET := check

check-fast: check-ns_server check-ep-engine check-ns_server check-libvbucket check-couchdb

check: $(CHECK_TARGETS)

check-ns_server: MAKE_CHECK_TARGET := test

$(CHECK_TARGETS): check-%: make-install-%
	$(MAKE) -C $* $(MAKE_CHECK_TARGET)

replace-wrappers: $(WRAPPERS) all
	mv $(PREFIX)/bin/memcached $(PREFIX)/bin/memcached.orig
	mv $(PREFIX)/bin/moxi $(PREFIX)/bin/moxi.orig
	sed -e 's|/bin/memcached|/bin/memcached.orig|g' <$(PREFIX)/bin/memcached-wrapper >$(PREFIX)/bin/memcached
	sed -e 's|/bin/moxi|/bin/moxi.orig|g' <$(PREFIX)/bin/moxi-wrapper >$(PREFIX)/bin/moxi
	chmod +x $(PREFIX)/bin/memcached $(PREFIX)/bin/moxi

ifneq "$(realpath tlm/Makefile.top)" ""
Makefile: tlm/Makefile.top
	rm -f $@
	cp $< $@
endif

# Allow the user to override stuff for all projects (like
# --with-erlang=)
ifneq "$(realpath $(HOME)/.couchbase/build/Makefile.extra)" ""
include $(HOME)/.couchbase/build/Makefile.extra
endif

# this thing can override settings and add components
ifneq "$(realpath .repo/Makefile.extra)" ""
include .repo/Makefile.extra
endif
